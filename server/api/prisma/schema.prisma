generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Identity {
  did String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  // TODO: link to user (owner of several identities)

  credentials Credential[]
}

// Metadata for Verifiable Credentials, with additional information
model Credential {
  id String @id @unique @default(uuid()) // This ID never changes so we can for example attach permanent UI properties to it

  createdAt    DateTime @default(now())
  identity     Identity @relation(fields: [identityDid], references: [did], onDelete: Restrict)
  credentialId String // ID of the real credential, that changes when "updating" the data (actually, delete and create a new VC)

  // TODO: save the full credential types for easy query by type later

  identityDid String // Related identity
}

enum IntentType {
  REQUEST_CREDENTIALS
  IMPORT_CREDENTIALS
}

// Request received from a third party app (through the did web connectivity sdk connector)
// to interact with the identity wallet, for example, to request credentials, or import credentials.
model Intent {
  id String @id @unique @default(uuid())

  createdAt DateTime   @default(now()) // Time of the initial intent request (creation)
  type      IntentType

  requestPayload  Json // Raw payload received by the requesting app
  responsePayload Json? // Raw response ready to return, or returned to the requesting app
}
