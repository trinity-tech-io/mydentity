import jwtDecode from "jwt-decode";
import { logger } from "./logger";
import { AccessTokenPayload } from "./user/access-token-payload";
import { signOut } from "./user/user.service";

const BROWSER_KEY_STORAGE_KEY = "browser-client-key";

/**
 * If we have no browser key saved yet, update browser key from the access token when we get a new access token. This is because the browser key
 * is generated by the backend, and returned to use in the JWT token after authentication. As this browser key is sent back
 * to the backend with every GQL API calls, the server doesn't generate a new browser key any more.
 */
export function checkNewAccessTokenForBrowserKey(accessToken: string): void {
  let decodedToken: AccessTokenPayload;
  try {
    decodedToken = jwtDecode(accessToken);
  }
  catch (e) {
    logger.error("browser", "Access token received from the backend cannot be decoded!");
    return;
  }

  if (!decodedToken.browserKey)
    throw new Error("Abnormal state: no browser key found in the access token!");

  const existingBrowserKey = getBrowserKey();
  if (existingBrowserKey) {
    // If we already have a browser key in local storage, but the browser key packaged in the
    // access token is not the same, this is weird. This can either be a state bug (dev bug) or
    // an attempt to reuse a stolen access token in another browser. If this is the case, we
    // throw an error for now (mostly dev bug).
    if (existingBrowserKey !== decodedToken.browserKey) {
      deleteBrowserKey();
      signOut()
      throw new Error(`State error! Browser key ${existingBrowserKey} is different from access token browser key ${decodedToken.browserKey} !`);
    }
  }

  setBrowserKey(decodedToken.browserKey);
}

export function getBrowserKey(): string {
  return localStorage.getItem(BROWSER_KEY_STORAGE_KEY);
}

export function setBrowserKey(browserKey: string): void {
  localStorage.setItem(BROWSER_KEY_STORAGE_KEY, browserKey);
}

export function deleteBrowserKey(): void {
  localStorage.removeItem(BROWSER_KEY_STORAGE_KEY);
}